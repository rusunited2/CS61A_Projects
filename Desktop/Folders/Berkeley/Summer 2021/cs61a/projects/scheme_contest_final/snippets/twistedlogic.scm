;;; Twisted Logic
;;; Created by [redacted]



(define (execute lst_expr)
    (cond ((null? (cdr lst_expr)) (eval (car lst_expr)))
          (else (eval (car lst_expr))
                (execute (cdr lst_expr)))
    )
)


(define (repeat lst_expr n)
    (cond ((= n 1) (execute lst_expr))
          (else (execute lst_expr)
                (repeat lst_expr (- n 1)))
    )
)


(define rad3 1.73205)


(define (draw-triangle size shade)
    (color shade)
    (begin_fill)
    (repeat (list (list 'forward size) '(right 120)) 3)
    (end_fill)
)


(define (draw-multicolor-triangle size last next alternate)
    (if (> size 2)
        (cond ((odd? alternate) (draw-triangle size next)
                                (draw-multicolor-triangle (* 3 (/ size 4)) next last (+ alternate 1)))
              ((even? alternate) (draw-triangle size next)
                                (draw-multicolor-triangle (- size (* 1 alternate)) next last (+ alternate 1)))
        )
    )
)


(define (draw-hexagon size color1 color2 color3 color4)
    (draw-multicolor-triangle size color1 color2 1)
    (right 120)
    (draw-multicolor-triangle size color1 color2 1)
    (right 120)
    (draw-multicolor-triangle size color1 color2 1)
    (right 120)
    (right 60)
    (draw-multicolor-triangle size color3 color4 1)
    (right 120)
    (draw-multicolor-triangle size color3 color4 1)
    (right 120)
    (draw-multicolor-triangle size color3 color4 1)
    (right 60)
)


(define (draw-hexagon-image size level color1 color2 color3 color4)
    (cond ((> level 0)
            (penup)
            (left 90)
            (forward (* (/ size 2) rad3))
            (right 90)
            (pendown)
            (draw-hexagon size color1 color2 color3 color4)
            (penup)
            (right 60)
            (forward size)
            (left 60)
            (forward size)
            (pendown)
            (draw-hexagon size color1 color2 color3 color4)
            (penup)
            (right 120)
            (forward size)
            (right 60)
            (forward size)
            (left 180)
            (pendown)
            (draw-hexagon size color1 color2 color3 color4)
            (penup)
            (left 120)
            (forward size)
            (left 60)
            (forward size)
            (right 180)
            (pendown)
            (draw-hexagon size color1 color2 color3 color4)
            (penup)
            (define newsize (/ size 4))
            (forward (+ size (* newsize 2)))
            (draw-hexagon-image newsize (- level 1) color3 color4 color1 color2)
          )
    )
)


(define (draw-background size color1 color2 color3 color4)
    (color color2)
    (begin_fill)
    (forward (* 5 (/ size 2)))
    (left 90)
    (forward (* 2 size rad3))
    (left 90)
    (forward (* 5 (/ size 2)))
    (left 90)
    (forward (* 2 size rad3))
    (left 90)
    (end_fill)
    (color color1)
    (begin_fill)
    (forward (* 5 (/ size 2)))
    (right 90)
    (forward (* 2 size rad3))
    (right 90)
    (forward (* 5 (/ size 2)))
    (right 90)
    (forward (* 2 size rad3))
    (left 90)
    (end_fill)
    (color color4)
    (begin_fill)
    (forward (* 5 (/ size 2)))
    (left 90)
    (forward (* 2 size rad3))
    (left 90)
    (forward (* 5 (/ size 2)))
    (left 90)
    (forward (* 2 size rad3))
    (left 90)
    (end_fill)
    (color color3)
    (begin_fill)
    (forward (* 5 (/ size 2)))
    (right 90)
    (forward (* 2 size rad3))
    (right 90)
    (forward (* 5 (/ size 2)))
    (right 90)
    (forward (* 2 size rad3))
    (left 90)
    (end_fill)
)


(define (draw-image size level color1 color2 color3 color4)
    (draw-background size color1 color2 color3 color4)
    (draw-hexagon-image size level color1 color2 color3 color4)
)


(hideturtle)
(speed 0)
(clear)
(penup)
(setposition 0 0)
(setheading 0)
(pendown)


(draw-image 150 3 "#e94f37" "#f6f7eb" "#44bba4" "#393e41")
